from flask import Flask, render_template, request, jsonify, session
import uuid
import os
import sqlite3
from datetime import datetime
from config import Config
from database.models import DatabaseManager
from embeddings.processor import DocumentProcessor
from rag.retriever import DocumentRetriever
from rag.generator import ResponseGenerator

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)
app.config.from_object(Config)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ RAG —Å–∏—Å—Ç–µ–º—ã
db_manager = DatabaseManager(Config.DATABASE_PATH)
doc_processor = DocumentProcessor(db_manager)
retriever = DocumentRetriever(db_manager)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
if not Config.OPENAI_API_KEY:
    print("–í–ù–ò–ú–ê–ù–ò–ï: OpenAI API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    print("–î–æ–±–∞–≤—å—Ç–µ OPENAI_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ —Ñ–∞–π–ª .env")
    generator = None
else:
    generator = ResponseGenerator(Config.OPENAI_API_KEY)

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –¥–∞—à–±–æ—Ä–¥ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏"""
    return render_template('index.html')

@app.route('/chat')
def chat_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —á–∞—Ç–∞ —Å RAG —Å–∏—Å—Ç–µ–º–æ–π"""
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if 'session_id' not in session:
        session['session_id'] = str(uuid.uuid4())
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    stats = db_manager.get_documents_stats()
    
    return render_template('chat.html', stats=stats)

@app.route('/api/chat', methods=['POST'])
def chat():
    """API –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Ç-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        data = request.get_json()
        user_query = data.get('query', '').strip()
        
        if not user_query:
            return jsonify({'error': '–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å'}), 400
        
        if not generator:
            return jsonify({
                'error': 'OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ OPENAI_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.'
            }), 500
        
        # –ü–æ–ª—É—á–∞–µ–º ID —Å–µ—Å—Å–∏–∏
        session_id = session.get('session_id', str(uuid.uuid4()))
        session['session_id'] = session_id
        
        # –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        search_results = retriever.hybrid_search(user_query, Config.TOP_K_RESULTS)
        formatted_results = retriever.format_search_results(search_results)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        conversation_history = db_manager.get_chat_history(session_id, limit=5)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_data = generator.generate_response(
            user_query, 
            formatted_results, 
            conversation_history
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        db_manager.save_chat_history(
            session_id, 
            user_query, 
            response_data['answer'],
            response_data['sources']
        )
        
        return jsonify({
            'answer': response_data['answer'],
            'sources': response_data['sources'],
            'confidence': response_data['confidence'],
            'query_validation': generator.validate_legal_query(user_query) if generator else None,
            'search_results_count': len(formatted_results),
            'session_id': session_id
        })
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ: {e}")
        return jsonify({'error': f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}'}), 500

@app.route('/api/search', methods=['POST'])
def search_documents():
    """API –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –±–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞"""
    try:
        data = request.get_json()
        query = data.get('query', '').strip()
        
        if not query:
            return jsonify({'error': '–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å'}), 400
        
        # –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        search_results = retriever.hybrid_search(query, top_k=10)
        formatted_results = retriever.format_search_results(search_results)
        
        return jsonify({
            'results': formatted_results,
            'total_found': len(formatted_results),
            'query': query
        })
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        return jsonify({'error': f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}'}), 500

@app.route('/api/document/<int:chunk_id>')
def get_document_chunk(chunk_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞–Ω–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    try:
        chunk = db_manager.get_chunk_by_id(chunk_id)
        if not chunk:
            return jsonify({'error': '–ß–∞–Ω–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç (—Å–æ—Å–µ–¥–Ω–∏–µ —á–∞–Ω–∫–∏)
        context = retriever.get_document_context(chunk_id, context_size=2)
        
        return jsonify({
            'chunk': chunk,
            'context': context
        })
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞–Ω–∫–∞: {e}")
        return jsonify({'error': f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}'}), 500

@app.route('/api/history')
def chat_history():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏"""
    try:
        session_id = session.get('session_id')
        if not session_id:
            return jsonify({'history': []})
        
        history = db_manager.get_chat_history(session_id, limit=20)
        return jsonify({'history': history})
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return jsonify({'error': f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}'}), 500

@app.route('/api/stats')
def get_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        stats = db_manager.get_documents_stats()
        return jsonify(stats)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return jsonify({'error': f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}'}), 500

@app.route('/api/admin/stats')
def get_admin_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ –∏ –¥–∞—à–±–æ—Ä–¥–∞"""
    try:
        stats = db_manager.get_documents_stats()
        return jsonify({
            'documents': stats['documents_count'],
            'chunks': stats['chunks_count'],
            'embeddings_ready': stats['embedding_progress']
        })
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return jsonify({'error': f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}'}), 500

@app.route('/admin')
def admin_panel():
    """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    stats = db_manager.get_documents_stats()
    return render_template('admin.html', stats=stats)

@app.route('/api/admin/process_documents', methods=['POST'])
def process_documents():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (—Å–æ–∑–¥–∞–Ω–∏–µ embeddings)"""
    try:
        result = doc_processor.process_all_documents(Config.DOCUMENTS_DIR)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à retriever –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        retriever.refresh_cache()
        
        return jsonify({
            'success': True,
            'result': result,
            'message': f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {result['processed']} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ {result['total']}"
        })
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
        return jsonify({
            'success': False,
            'error': f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}'
        }), 500

@app.route('/api/admin/update_embeddings', methods=['POST'])
def update_embeddings():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ embeddings –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –±–µ–∑ –Ω–∏—Ö"""
    try:
        result = doc_processor.update_embeddings()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à retriever
        retriever.refresh_cache()
        
        return jsonify({
            'success': result,
            'message': 'Embeddings —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã' if result else '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ embeddings'
        })
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è embeddings: {e}")
        return jsonify({
            'success': False,
            'error': f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}'
        }), 500

@app.route('/api/admin/clear_history', methods=['POST'])
def clear_chat_history():
    """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤"""
    try:
        with sqlite3.connect(db_manager.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('DELETE FROM chat_history')
            conn.commit()
            
        return jsonify({
            'success': True,
            'message': '–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤ –æ—á–∏—â–µ–Ω–∞'
        })
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return jsonify({
            'success': False,
            'error': f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}'
        }), 500

@app.route('/api/admin/auto_setup', methods=['POST'])
def auto_setup():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        print("\nüöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = db_manager.get_documents_stats()
        
        result = {
            'steps': [],
            'success': True,
            'final_stats': stats
        }
        
        # –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if stats['documents_count'] == 0:
            print("üìö –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã...")
            load_result = db_manager.bulk_load_documents_from_directory(Config.DOCUMENTS_DIR)
            result['steps'].append({
                'step': 'document_loading',
                'status': 'completed' if load_result['loaded'] > 0 else 'failed',
                'message': f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {load_result['loaded']} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
                'details': load_result
            })
        else:
            result['steps'].append({
                'step': 'document_loading',
                'status': 'skipped',
                'message': f"–î–æ–∫—É–º–µ–Ω—Ç—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã ({stats['documents_count']} —à—Ç.)"
            })
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = db_manager.get_documents_stats()
        
        # –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if stats['embedded_chunks'] < stats['chunks_count'] or stats['chunks_count'] == 0:
            print("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã...")
            process_result = doc_processor.process_all_documents(Config.DOCUMENTS_DIR)
            result['steps'].append({
                'step': 'document_processing',
                'status': 'completed' if process_result['processed'] > 0 else 'failed',
                'message': f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {process_result['processed']} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
                'details': process_result
            })
            
            if process_result['processed'] == 0:
                result['success'] = False
        else:
            result['steps'].append({
                'step': 'document_processing',
                'status': 'skipped',
                'message': '–î–æ–∫—É–º–µ–Ω—Ç—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã'
            })
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à retriever
        retriever.refresh_cache()
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        result['final_stats'] = db_manager.get_documents_stats()
        
        print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        return jsonify(result)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
        return jsonify({
            'success': False,
            'error': f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}',
            'steps': []
        }), 500

@app.errorhandler(404)
def not_found(error):
    return render_template('404.html'), 404

@app.errorhandler(500)
def internal_error(error):
    return render_template('500.html'), 500

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
def initialize_app():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ RAG —Å–∏—Å—Ç–µ–º—ã –¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    if os.path.exists(Config.DOCUMENTS_DIR):
        doc_count = len([f for f in os.listdir(Config.DOCUMENTS_DIR) if f.endswith('.txt')])
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {doc_count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ {Config.DOCUMENTS_DIR}")
    else:
        print(f"‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ {Config.DOCUMENTS_DIR} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    stats = db_manager.get_documents_stats()
    print(f"üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {stats['documents_count']} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, {stats['chunks_count']} —á–∞–Ω–∫–æ–≤")
    print(f"üß† Embeddings: {stats['embedded_chunks']} —á–∞–Ω–∫–æ–≤ ({stats['embedding_progress']:.1f}%)")
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    if stats['documents_count'] > 0 and stats['embedding_progress'] == 0:
        print("\nüîß –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 50 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
            unprocessed = db_manager.get_unprocessed_documents()[:50]
            if unprocessed:
                print(f"üìã –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ {len(unprocessed)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
                doc_processor._process_documents_batch(unprocessed)
                retriever.refresh_cache()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats = db_manager.get_documents_stats()
                print(f"‚úÖ –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {stats['embedding_progress']:.1f}% –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏")
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
    
    if stats['embedded_chunks'] == 0 and stats['documents_count'] > 0:
        print("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: Embeddings –Ω–µ —Å–æ–∑–¥–∞–Ω—ã!")
        print("   –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ /admin –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        print("   –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É")
    
    if not Config.OPENAI_API_KEY:
        print("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: OpenAI API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("   –î–æ–±–∞–≤—å—Ç–µ OPENAI_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    print("=" * 60)
    print("üåê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("   –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:5001")
    print("   –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: http://localhost:5001/admin")
    print("=" * 60)

if __name__ == '__main__':
    initialize_app()
    app.run(host='0.0.0.0', port=5001, debug=Config.DEBUG) 